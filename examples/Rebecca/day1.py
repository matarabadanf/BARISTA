# coding: utf-8
from functools import reduce
import numpy
from pyscf import gto, scf, ci
myhf1 = gto.M(atom='H 0 0 0; F 0 0 1.1', basis='6-31g', verbose=0)
myhf1
myhf1.atom_coords()
myhf1.bas_nctr
myhf1.bas_nctr()
myhf1.bas_nctr(1)
myhf1.bas_nctr(2)
myhf1.bas_nctr(3)
myhf1.bas_nctr(4)
myhf1.bas_nctr(5)
myhf1.bas_nctr(6)
myhf1.bas_nctr(7)
myhf1.bas_nctr(0)
myhf1.atom_nshells(0)
myhf1.atom_nshells(1)
myhf1.cart_labels()
myhf1.bas_atom()
myhf1.bas_atom(0)
myhf1.bas_atom(1)
myhf1.bas_atom(2)
myhf1.bas_atom(3)
myhf1.bas_atom(4)
myhf1.bas_atom(5)
myhf1.bas_atom(6)
myhf1.bas_atom(7)
myhf1.bas_angular(0)
myhf1.bas_angular(1)
myhf1.bas_angular(2)
myhf1.bas_angular(3)
myhf1.bas_angular(4)
myhf1.bas_angular(5)
myhf1.bas_angular(6)
myhf1.bas_angular(7)
myhf1.cart_labels()
myhf1.sph_labels()
myhf1.condense_to_shell()
myhf1 = gto.M(atom='H 0 0 0; F 0 0 1.1', basis='sto-3g', verbose=0)
myhf1.cart_labels()
myhf1.bas_nprim(0)
myhf1.bas_nprim(2)
myhf1.bas_nprim(1)
myhf1.bas_nprim(3)
myhf1.bas_nprim(4)
myhf2 = gto.M(atom='H 0 0 0; F 0 0 1.1', basis='6-31g', verbose=0).apply(scf.RHF).run()
s12 = gto.intor_cross('cint1e_ovlp_sph', myhf1.mol, myhf2.mol)
myhf1 = gto.M(atom='H 0 0 0; F 0 0 1.1', basis='6-31g', verbose=0).apply(scf.RHF).run()
ci1 = ci.CISD(myhf1).run()
print('CISD energy of mol1', ci1.e_tot)

myhf2 = gto.M(atom='H 0 0 0; F 0 0 1.1', basis='6-31g', verbose=0).apply(scf.RHF).run()
ci2 = ci.CISD(myhf2).run()
print('CISD energy of mol2', ci2.e_tot)
s12 = gto.intor_cross('cint1e_ovlp_sph', myhf1.mol, myhf2.mol)
print(s12)
myhf1 = gto.M(atom='H 0 0 0; F 0 0 1.1', basis='sto-3g', verbose=0).apply(scf.RHF).run()
ci1 = ci.CISD(myhf1).run()
print('CISD energy of mol1', ci1.e_tot)

myhf2 = gto.M(atom='H 0 0 0; F 0 0 1.1', basis='sto-3g', verbose=0).apply(scf.RHF).run()
ci2 = ci.CISD(myhf2).run()
print('CISD energy of mol2', ci2.e_tot)
s12 = gto.intor_cross('cint1e_ovlp_sph', myhf1.mol, myhf2.mol)
print(s12)
myhf1 = gto.M(atom='H 0 0 0; F 0 0 10.1', basis='sto-3g', verbose=0).apply(scf.RHF).run()
ci1 = ci.CISD(myhf1).run()
print('CISD energy of mol1', ci1.e_tot)

myhf2 = gto.M(atom='H 0 0 0; F 0 0 10.1', basis='sto-3g', verbose=0).apply(scf.RHF).run()
ci2 = ci.CISD(myhf2).run()
print('CISD energy of mol2', ci2.e_tot)
s12 = gto.intor_cross('cint1e_ovlp_sph', myhf1.mol, myhf2.mol)
print(s12)
print(s12[0])
print(s12[1])
print(s12[2])
print(s12[3])
print(s12[4])
print(s12[5])
print(s12[6])
print(s12)
s12 = reduce(numpy.dot, (myhf1.mo_coeff.T, s12, myhf2.mo_coeff))
print(s12)
s12 = gto.intor_cross('cint1e_ovlp_sph', myhf1.mol, myhf2.mol)
s12t = myhf1.mo_coeff.T @ s12 @ myhf2.mo_coeff
print(s12t)
myhf1.mo_coeff
myhf1.mol.bas_angular()
myhf1.mol.bas_angular(0)
myhf1.mol.bas_angular(1)
myhf1.mol.output
myhf1.mol.get_overlap_cond()
myhf1.mol.nbas
s12 = gto.intor_cross('cint1e_ovlp_sph', myhf1.mol, myhf2.mol)
s12
myhf1.mol.intor('cint1e_ovlp_sph')
get_ipython().run_line_magic('', 'save')
get_ipython().run_line_magic('save', '')
